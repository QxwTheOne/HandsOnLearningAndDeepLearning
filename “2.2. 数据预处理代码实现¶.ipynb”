{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"“2.2. 数据预处理代码实现¶.ipynb”","provenance":[{"file_id":"https://github.com/d2l-ai/d2l-zh-pytorch-colab/blob/master/chapter_preliminaries/pandas.ipynb","timestamp":1630755049283}],"collapsed_sections":[]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"dKMmfQUwkwcS"},"source":["# 数据预处理\n","\n","## 读取数据集\n","\n","举一个例子，我们首先(**创建一个人工数据集，并存储在csv（逗号分隔值）文件**)`../data/house_tiny.csv`中。以其他格式存储的数据也可以通过类似的方式进行处理。下面的`mkdir_if_not_exist`函数可确保目录`../data`存在。注意，注释`#@save`是一个特殊的标记，该标记下方的函数、类或语句将保存在`d2l`软件包中，以便以后可以直接调用它们（例如`d2l.mkdir_if_not_exist(path)`）而无须重新定义。\n","\n","下面我们将数据集按行写入CSV文件中。\n"]},{"cell_type":"code","metadata":{"id":"evUkZWJwkwcW"},"source":["import os\n","\n","os.makedirs(os.path.join('..', 'data'), exist_ok=True)\n","data_file = os.path.join('..', 'data', 'house_tiny.csv')\n","with open(data_file, 'w') as f:\n","    f.write('NumRooms,Alley,Price\\n')  # 列名\n","    f.write('NA,Pave,127500\\n')  # 每行表示一个数据样本\n","    f.write('2,NA,106000\\n')\n","    f.write('4,NA,178100\\n')\n","    f.write('NA,NA,140000\\n')"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"_lNIsLQbkwcY"},"source":["要[**从创建的CSV文件中加载原始数据集**]，我们导入`pandas`包并调用`read_csv`函数。该数据集有四行三列。其中每行描述了房间数量（“NumRooms”）、巷子类型（“Alley”）和房屋价格（“Price”）。\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":172},"id":"DKIQ3DIDkwcZ","executionInfo":{"elapsed":409,"status":"ok","timestamp":1630755448141,"user":{"displayName":"xuewen Qin","photoUrl":"","userId":"02728921575002775664"},"user_tz":-480},"outputId":"47e9f867-e430-48e0-f60d-84a21cc43638"},"source":["# 如果没有安装pandas，只需取消对以下行的注释：\n","# !pip install pandas\n","import pandas as pd\n","\n","data = pd.read_csv(data_file)\n","data"],"execution_count":null,"outputs":[{"data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>NumRooms</th>\n","      <th>Alley</th>\n","      <th>Price</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>NaN</td>\n","      <td>Pave</td>\n","      <td>127500</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2.0</td>\n","      <td>NaN</td>\n","      <td>106000</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>4.0</td>\n","      <td>NaN</td>\n","      <td>178100</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>140000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   NumRooms Alley   Price\n","0       NaN  Pave  127500\n","1       2.0   NaN  106000\n","2       4.0   NaN  178100\n","3       NaN   NaN  140000"]},"execution_count":4,"metadata":{},"output_type":"execute_result"}]},{"cell_type":"markdown","metadata":{"id":"JWH0DlG-kwca"},"source":["## 处理缺失值\n","\n","注意，“NaN”项代表缺失值。[**为了处理缺失的数据，典型的方法包括*插值*和*删除*，**]其中插值用替代值代替缺失值。而删除则忽略缺失值。在(**这里，我们将考虑插值**)。\n","\n","通过位置索引`iloc`，我们将`data`分成`inputs`和`outputs`，其中前者为`data`的前两列，而后者为`data`的最后一列。对于`inputs`中缺少的数值，我们用同一列的均值替换“NaN”项。\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BsUuXPCPkwcb","executionInfo":{"elapsed":423,"status":"ok","timestamp":1630755364611,"user":{"displayName":"xuewen Qin","photoUrl":"","userId":"02728921575002775664"},"user_tz":-480},"outputId":"658bcf20-3449-49cc-a48f-fa820434b859"},"source":["inputs, outputs = data.iloc[:, 0:2], data.iloc[:, 2]\n","inputs = inputs.fillna(inputs.mean())\n","print(inputs)"],"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["   NumRooms Alley\n","0       3.0  Pave\n","1       2.0   NaN\n","2       4.0   NaN\n","3       3.0   NaN\n"]}]},{"cell_type":"markdown","metadata":{"id":"puf0_5CHkwcc"},"source":["[**对于`inputs`中的类别值或离散值，我们将“NaN”视为一个类别。**]由于“巷子”（“Alley”）列只接受两种类型的类别值“Pave”和“NaN”，`pandas`可以自动将此列转换为两列“Alley_Pave”和“Alley_nan”。巷子类型为“Pave”的行会将“Alley_Pave”的值设置为1，“Alley_nan”的值设置为0。缺少巷子类型的行会将“Alley_Pave”和“Alley_nan”分别设置为0和1。\n"]},{"cell_type":"markdown","metadata":{"id":"PaOqxZ4poCKB"},"source":[" 特征提取之pd.get_dummies()，one-hot的基本思想：将离散型特征的每一种取值都看成一种状态，若你的这一特征中有N个不相同的取值，那么我们就可以将该特征抽象成N种不同的状态，one-hot编码保证了每一个取值只会使得一种状态处于“激活态”，也就是说这N种状态中只有一个状态位值为1，其他状态位都是0。"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-ueTdrBlkwcc","executionInfo":{"elapsed":627,"status":"ok","timestamp":1630755916206,"user":{"displayName":"xuewen Qin","photoUrl":"","userId":"02728921575002775664"},"user_tz":-480},"outputId":"df6bc017-852d-4595-d25a-61063b187eef"},"source":["inputs = pd.get_dummies(inputs, dummy_na=True)\n","print(inputs)"],"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["   NumRooms  Alley_Pave  Alley_nan\n","0       3.0           1          0\n","1       2.0           0          1\n","2       4.0           0          1\n","3       3.0           0          1\n"]}]},{"cell_type":"markdown","metadata":{"id":"d1UeaDO_kwcd"},"source":["## 转换为张量格式\n","\n","[**现在`inputs`和`outputs`中的所有条目都是数值类型，它们可以转换为张量格式。**]当数据采用张量格式后，可以通过在 :numref:`sec_ndarray`中引入的那些张量函数来进一步操作。\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"m-_E6ioorL4K","executionInfo":{"status":"ok","timestamp":1630756726349,"user_tz":-480,"elapsed":397,"user":{"displayName":"xuewen Qin","photoUrl":"","userId":"02728921575002775664"}},"outputId":"cf0ebc34-f342-4c65-8f2e-dec1d5d99d32"},"source":["inputs.values"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[3., 1., 0.],\n","       [2., 0., 1.],\n","       [4., 0., 1.],\n","       [3., 0., 1.]])"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","metadata":{"colab":{"background_save":true},"id":"Cz9e53Vakwcd","outputId":"287af00e-a45c-4339-b88c-38b42c9ebd12"},"source":["import torch\n","\n","X, y = torch.tensor(inputs.values), torch.tensor(outputs.values)\n","X, y"],"execution_count":null,"outputs":[{"data":{"text/plain":["(tensor([[3., 1., 0.],\n","         [2., 0., 1.],\n","         [4., 0., 1.],\n","         [3., 0., 1.]], dtype=torch.float64),\n"," tensor([127500, 106000, 178100, 140000]))"]},"execution_count":null,"metadata":{},"output_type":"execute_result"}]},{"cell_type":"markdown","metadata":{"id":"eBVGYjwikwce"},"source":["## 小结\n","\n","* 像庞大的Python生态系统中的许多其他扩展包一样，`pandas`可以与张量兼容。\n","* 插值和删除可用于处理缺失的数据。\n","\n","## 练习\n","\n","创建包含更多行和列的原始数据集。\n","\n","1. 删除缺失值最多的列。\n","2. 将预处理后的数据集转换为张量格式。\n"]},{"cell_type":"code","metadata":{"id":"wIBNdzblrSbC"},"source":["import os \n","\n","os.makedirs(os.path.join('..', 'data'), exist_ok=True)\n","data_file = os.path.join('..', 'data', 'house_tiny.csv')\n","with open(data_file, 'w') as f:\n","    f.write('NumRooms,Alley,Price\\n')  # 列名\n","    f.write('NA,Pave,127500\\n')  # 每行表示一个数据样本\n","    f.write('2,NA,106000\\n')\n","    f.write('4,NA,178100\\n')\n","    f.write('NA,NA,140000\\n')\n","    f.write('2,NA,106000\\n')\n","    f.write('4,NA,178100\\n')\n","    f.write('NA,NA,140000\\n')\n","    f.write('2,NA,106000\\n')\n","    f.write('4,NA,178100\\n')\n","    f.write('NA,NA,140000\\n')\n","    f.write('2,NA,106000\\n')\n","    f.write('4,NA,178100\\n')\n","    f.write('NA,NA,140000\\n')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kb2dfdLDsaJ9","executionInfo":{"status":"ok","timestamp":1630757394542,"user_tz":-480,"elapsed":12,"user":{"displayName":"xuewen Qin","photoUrl":"","userId":"02728921575002775664"}},"outputId":"e86ddb1a-dc84-4cb9-be61-1e42b7e6d800"},"source":["import pandas as pd\n","\n","data = pd.read_csv(data_file)\n","print(data)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["    NumRooms Alley   Price\n","0        NaN  Pave  127500\n","1        2.0   NaN  106000\n","2        4.0   NaN  178100\n","3        NaN   NaN  140000\n","4        2.0   NaN  106000\n","5        4.0   NaN  178100\n","6        NaN   NaN  140000\n","7        2.0   NaN  106000\n","8        4.0   NaN  178100\n","9        NaN   NaN  140000\n","10       2.0   NaN  106000\n","11       4.0   NaN  178100\n","12       NaN   NaN  140000\n"]}]},{"cell_type":"code","metadata":{"id":"JPSwNILdscxR"},"source":["# 使用isnull函数来判断是否缺失值，然后通过sum来求\n","c = data.isnull().sum(axis=0)\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":450},"id":"07f2m59tsc2J","executionInfo":{"status":"ok","timestamp":1630757072559,"user_tz":-480,"elapsed":591,"user":{"displayName":"xuewen Qin","photoUrl":"","userId":"02728921575002775664"}},"outputId":"4aebeec7-b994-4754-9ea1-3588127968c7"},"source":["# 直接删除一列\n","data.drop('Alley', axis=1 )"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>NumRooms</th>\n","      <th>Price</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>NaN</td>\n","      <td>127500</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2.0</td>\n","      <td>106000</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>4.0</td>\n","      <td>178100</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>NaN</td>\n","      <td>140000</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2.0</td>\n","      <td>106000</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>4.0</td>\n","      <td>178100</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>NaN</td>\n","      <td>140000</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>2.0</td>\n","      <td>106000</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>4.0</td>\n","      <td>178100</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>NaN</td>\n","      <td>140000</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>2.0</td>\n","      <td>106000</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>4.0</td>\n","      <td>178100</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>NaN</td>\n","      <td>140000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["    NumRooms   Price\n","0        NaN  127500\n","1        2.0  106000\n","2        4.0  178100\n","3        NaN  140000\n","4        2.0  106000\n","5        4.0  178100\n","6        NaN  140000\n","7        2.0  106000\n","8        4.0  178100\n","9        NaN  140000\n","10       2.0  106000\n","11       4.0  178100\n","12       NaN  140000"]},"metadata":{},"execution_count":12}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TMDt5hCZsc7_","executionInfo":{"status":"ok","timestamp":1630757092707,"user_tz":-480,"elapsed":508,"user":{"displayName":"xuewen Qin","photoUrl":"","userId":"02728921575002775664"}},"outputId":"2daf67e5-2b88-408e-bd8d-2468ef43af48"},"source":["# 划分\n","inputs, outputs = data.iloc[:, 0:2], data.iloc[:, 2]\n","inputs = inputs.fillna(inputs.mean())\n","inputs = pd.get_dummies(inputs, dummy_na = True)\n","X, y = torch.tensor(inputs.values), torch.tensor(outputs.values)\n","X, y"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(tensor([[3., 1., 0.],\n","         [2., 0., 1.],\n","         [4., 0., 1.],\n","         [3., 0., 1.],\n","         [2., 0., 1.],\n","         [4., 0., 1.],\n","         [3., 0., 1.],\n","         [2., 0., 1.],\n","         [4., 0., 1.],\n","         [3., 0., 1.],\n","         [2., 0., 1.],\n","         [4., 0., 1.],\n","         [3., 0., 1.]], dtype=torch.float64),\n"," tensor([127500, 106000, 178100, 140000, 106000, 178100, 140000, 106000, 178100,\n","         140000, 106000, 178100, 140000]))"]},"metadata":{},"execution_count":13}]},{"cell_type":"markdown","metadata":{"id":"DK6CXFqrkwce"},"source":["[Discussions](https://discuss.d2l.ai/t/1750)\n"]}]}