{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"},"colab":{"name":"“2.7查阅文档代码实现.ipynb”","provenance":[{"file_id":"https://github.com/d2l-ai/d2l-zh-pytorch-colab/blob/master/chapter_preliminaries/lookup-api.ipynb","timestamp":1630763006952}],"collapsed_sections":[]}},"cells":[{"cell_type":"markdown","metadata":{"origin_pos":4,"id":"rsnEI1TnDLIH"},"source":["## 查找模块中的所有函数和类\n","\n","为了知道模块中可以调用哪些函数和类，我们调用`dir`函数。例如，我们可以(**查询随机数生成模块中的所有属性：**)\n"]},{"cell_type":"code","metadata":{"attributes":{"classes":[],"id":"","n":"1"},"origin_pos":6,"tab":["pytorch"],"id":"62vAiWOYDLII","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1630826353284,"user_tz":-480,"elapsed":4106,"user":{"displayName":"xuewen Qin","photoUrl":"","userId":"02728921575002775664"}},"outputId":"dd5fe777-757e-493a-b641-508ebca33e1c"},"source":["import torch\n","\n","print(dir(torch.distributions))\n"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["['AbsTransform', 'AffineTransform', 'Bernoulli', 'Beta', 'Binomial', 'CatTransform', 'Categorical', 'Cauchy', 'Chi2', 'ComposeTransform', 'ContinuousBernoulli', 'CorrCholeskyTransform', 'Dirichlet', 'Distribution', 'ExpTransform', 'Exponential', 'ExponentialFamily', 'FisherSnedecor', 'Gamma', 'Geometric', 'Gumbel', 'HalfCauchy', 'HalfNormal', 'Independent', 'IndependentTransform', 'Kumaraswamy', 'LKJCholesky', 'Laplace', 'LogNormal', 'LogisticNormal', 'LowRankMultivariateNormal', 'LowerCholeskyTransform', 'MixtureSameFamily', 'Multinomial', 'MultivariateNormal', 'NegativeBinomial', 'Normal', 'OneHotCategorical', 'OneHotCategoricalStraightThrough', 'Pareto', 'Poisson', 'PowerTransform', 'RelaxedBernoulli', 'RelaxedOneHotCategorical', 'ReshapeTransform', 'SigmoidTransform', 'SoftmaxTransform', 'StackTransform', 'StickBreakingTransform', 'StudentT', 'TanhTransform', 'Transform', 'TransformedDistribution', 'Uniform', 'VonMises', 'Weibull', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__path__', '__spec__', 'bernoulli', 'beta', 'biject_to', 'binomial', 'categorical', 'cauchy', 'chi2', 'constraint_registry', 'constraints', 'continuous_bernoulli', 'dirichlet', 'distribution', 'exp_family', 'exponential', 'fishersnedecor', 'gamma', 'geometric', 'gumbel', 'half_cauchy', 'half_normal', 'identity_transform', 'independent', 'kl', 'kl_divergence', 'kumaraswamy', 'laplace', 'lkj_cholesky', 'log_normal', 'logistic_normal', 'lowrank_multivariate_normal', 'mixture_same_family', 'multinomial', 'multivariate_normal', 'negative_binomial', 'normal', 'one_hot_categorical', 'pareto', 'poisson', 'register_kl', 'relaxed_bernoulli', 'relaxed_categorical', 'studentT', 'transform_to', 'transformed_distribution', 'transforms', 'uniform', 'utils', 'von_mises', 'weibull']\n"]}]},{"cell_type":"markdown","metadata":{"origin_pos":8,"id":"oG4xsMfmDLIK"},"source":["\n","## 查找特定函数和类的用法\n","\n","有关如何使用给定函数或类的更具体说明，我们可以调用`help`函数。例如，我们来[**查看张量`ones`函数的用法。**]\n"]},{"cell_type":"code","metadata":{"origin_pos":10,"tab":["pytorch"],"id":"cSCXxk_NDLIK","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1630826361211,"user_tz":-480,"elapsed":370,"user":{"displayName":"xuewen Qin","photoUrl":"","userId":"02728921575002775664"}},"outputId":"427779ae-0dfd-4dc0-a7ab-cfe988b844bc"},"source":["help(torch.ones)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Help on built-in function ones:\n","\n","ones(...)\n","    ones(*size, *, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False) -> Tensor\n","    \n","    Returns a tensor filled with the scalar value `1`, with the shape defined\n","    by the variable argument :attr:`size`.\n","    \n","    Args:\n","        size (int...): a sequence of integers defining the shape of the output tensor.\n","            Can be a variable number of arguments or a collection like a list or tuple.\n","    \n","    Keyword arguments:\n","        out (Tensor, optional): the output tensor.\n","        dtype (:class:`torch.dtype`, optional): the desired data type of returned tensor.\n","            Default: if ``None``, uses a global default (see :func:`torch.set_default_tensor_type`).\n","        layout (:class:`torch.layout`, optional): the desired layout of returned Tensor.\n","            Default: ``torch.strided``.\n","        device (:class:`torch.device`, optional): the desired device of returned tensor.\n","            Default: if ``None``, uses the current device for the default tensor type\n","            (see :func:`torch.set_default_tensor_type`). :attr:`device` will be the CPU\n","            for CPU tensor types and the current CUDA device for CUDA tensor types.\n","        requires_grad (bool, optional): If autograd should record operations on the\n","            returned tensor. Default: ``False``.\n","    \n","    Example::\n","    \n","        >>> torch.ones(2, 3)\n","        tensor([[ 1.,  1.,  1.],\n","                [ 1.,  1.,  1.]])\n","    \n","        >>> torch.ones(5)\n","        tensor([ 1.,  1.,  1.,  1.,  1.])\n","\n"]}]},{"cell_type":"markdown","metadata":{"origin_pos":12,"id":"foGsNyhXDLIK"},"source":["从文档中，我们可以看到`ones`函数创建一个具有指定形状的新张量，并将所有元素值设置为1。让我们来[**运行一个快速测试**]来确认这一解释：\n"]},{"cell_type":"code","metadata":{"origin_pos":14,"tab":["pytorch"],"id":"uvGZ712_DLIL","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1630826387209,"user_tz":-480,"elapsed":677,"user":{"displayName":"xuewen Qin","photoUrl":"","userId":"02728921575002775664"}},"outputId":"4e82d32d-5056-423c-b7f1-bbca9133fc4e"},"source":["torch.ones(4)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([1., 1., 1., 1.])"]},"metadata":{},"execution_count":3}]},{"cell_type":"markdown","metadata":{"origin_pos":16,"id":"eN-kAKaaDLIM"},"source":["在Jupyter记事本中，我们可以使用`?`在另一个窗口中显示文档。例如，`list?`将创建与`help(list)`几乎相同的内容，并在新的浏览器窗口中显示它。此外，如果我们使用两个问号，如`list??`，将显示实现该函数的Python代码。"]},{"cell_type":"code","metadata":{"id":"ndwFW7mEDiFQ"},"source":[""],"execution_count":null,"outputs":[]}]}